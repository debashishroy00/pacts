{
  "permissions": {
    "allow": [
      "Bash(python -m backend.cli.main test --req wikipedia_search --headed --slow-mo 1000)",
      "Bash(python -m backend.cli.main test --req github_search --headed --slow-mo 1000)",
      "Bash(python -m backend.cli.main test --req shopping_e2e --headed --slow-mo 800)",
      "Bash(python -m backend.cli.main test --req login_simple --headed --slow-mo 1000)",
      "Bash(dir screenshots /b)",
      "Bash(python -m backend.cli.main test --req wikipedia_search --headed --slow-mo 800)",
      "Bash(python -m backend.cli.main test --req github_search --headed --slow-mo 800)",
      "Bash(python -m backend.cli.main test --req login_simple --headed --slow-mo 800)",
      "Bash(python -m backend.cli.main test --req amazon_search --headed --slow-mo 800)",
      "Bash(python -m backend.cli.main test --req ebay_search --headed --slow-mo 800)",
      "Bash(git push origin main)",
      "Bash(cat .gitignore)",
      "Bash(cat gitignore)",
      "Bash(git reset HEAD~1)",
      "Bash(git rm --cached .env)",
      "Bash(git add -A)",
      "Bash(git commit -m \"v2.0: Pattern-based execution architecture with 100% success rate\n\n- Pattern registry (autocomplete, activator, SPA nav)\n- Execution helpers with multi-strategy fallbacks\n- Refactored executor (85% code reduction)\n- Enhanced discovery (fillable element filtering)\n- 5/5 production sites passing (Wikipedia, GitHub, Amazon, eBay, SauceDemo)\n- 0 heal rounds average\n- Full documentation update\n- Repository cleanup\")",
      "Bash(playwright --version)",
      "Bash(npx playwright --version)",
      "Bash(git commit -m \"chore(release): Prepare v1.2-prod-validated release\n\n- Add versions.txt with pinned toolchain\n- Add .env.prod production template\n- Add GitHub Actions smoke tests workflow\n- Add CHANGELOG.md documenting all versions\n- Add RELEASE-v1.2.md with full release notes\n- Update .claude settings\n\nRelease highlights:\n- 100% success rate (5/5 sites)\n- 0 heal rounds average\n- Pattern-based execution\n- Production validated\")",
      "Bash(git tag -a v1.2-prod-validated -m \"PACTS v1.2 - Production Validated Release\n\nHeadline Achievement:\n- 100% success rate across 5 production sites\n- 0 heal rounds average\n- Pattern-based execution architecture\n\nValidated Sites:\n- Wikipedia (autocomplete pattern)\n- GitHub (activator pattern)\n- Amazon (e-commerce, fillable filter)\n- eBay (e-commerce, autocomplete)\n- SauceDemo (regression protection)\n\nKey Features:\n- Pattern registry (autocomplete, activator, SPA nav)\n- Execution helpers with multi-strategy fallbacks\n- Refactored executor (85% code reduction)\n- Enhanced discovery (fillable element filtering)\n- Full documentation and CI/CD pipeline\n\nKPIs:\n- Success Rate: 100% (5/5)\n- Heal Rounds: 0 average\n- Execution Time: 1.9s average\n- Visual Verification: All screenshots captured\n\nStatus: Production Ready âœ…\")",
      "Bash(git push origin v1.2-prod-validated)",
      "Bash(python -m backend.cli.main test --req salesforce_login --headed --slow-mo 1000)",
      "Bash(python -m backend.cli.main test --spec specs/salesforce_login_manual.json --headed --slow-mo 1500)",
      "Bash(python -m backend.cli.main test --help)",
      "Bash(python -m backend.cli.main test --req salesforce_login_manual --headed --slow-mo 1500)",
      "Bash(python -m backend.cli.main test --req salesforce_login --headed --slow-mo 2000)",
      "Bash(if exist \"specs\\salesforce_login_manual.json\" del \"specs\\salesforce_login_manual.json\")",
      "Bash(python -m backend.cli.main test --req salesforce_login --headed --slow-mo 1500)",
      "Bash(tee sf_test_detailed.txt)",
      "Bash(cat requirements/salesforce_login.txt)",
      "Bash(python -m backend.cli.main test --req salesforce_login --headed --slow-mo 800)",
      "Bash(python -m backend.cli.main test --req salesforce_full_hitl --headed --slow-mo 800)",
      "Bash(timeout 60 python -m backend.cli.main test --req salesforce_full_hitl --headed --slow-mo 800)",
      "Bash(python test_hitl_quick.py)"
    ],
    "deny": [],
    "ask": []
  }
}
