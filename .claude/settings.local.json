{
  "permissions": {
    "allow": [
      "Bash(git checkout -b feat/mcp-playwright)",
      "Bash(git add backend/mcp/ backend/.env.example backend/agents/executor.py backend/agents/generator.py backend/agents/oracle_healer.py backend/runtime/discovery.py backend/graph/build_graph.py docs/MCP-PW-INTEGRATION.md)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat(mcp-playwright): Integrate MCP Playwright for production-grade discovery\n\nAdd MCP Playwright integration with graceful fallback to local heuristics.\n\n**Integration Points:**\n- Discovery: MCP-first selector resolution with local fallback\n- Executor: MCP actionability gates (unique, visible, enabled, stable)\n- OracleHealer: MCP reveal/reprobe for advanced healing\n- VerdictRCA: MCP debug probe with full diagnostic context\n- Generator: MCP Test recorder-style locator suggestions\n\n**Features:**\n- âœ… Feature flag (USE_MCP=false by default)\n- âœ… Zero breaking changes to Excel/JSON specs\n- âœ… Graceful degradation when MCP unavailable\n- âœ… Shadow DOM, frames, ARIA native support via MCP\n- âœ… Full backward compatibility with Phase 1/2 tests\n\n**Files Added:**\n- backend/mcp/__init__.py\n- backend/mcp/playwright_client.py (async client wrapper)\n- docs/MCP-PW-INTEGRATION.md (complete integration guide)\n\n**Files Modified:**\n- backend/.env.example (MCP config)\n- backend/runtime/discovery.py (MCP discovery + reprobe)\n- backend/agents/executor.py (MCP gates)\n- backend/agents/oracle_healer.py (MCP reveal)\n- backend/agents/generator.py (MCP suggestions)\n- backend/graph/build_graph.py (MCP diagnostics in VerdictRCA)\n\nðŸš€ Generated with Claude Code\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
